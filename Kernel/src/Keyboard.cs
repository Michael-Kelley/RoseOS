using System;
using System.Collections.Generic;

using static System.Key;


static class Keyboard {
	readonly static Key[] kbdUK;
	readonly static char[] charsUK, charsShiftUK;

	static Key[] kbdCurrent;
	static char[] charsCurrent, charsShiftCurrent;
	static bool alt, shift, ctrl;
	static Queue<KeyInfo> queue;


	static Keyboard() {
		kbdUK = new[] {
			None, Escape, D1, D2, D3, D4, D5, D6, D7, D8, D9, D0, OemMinus, OemPlus, Backspace, Tab,
			Q, W, E, R, T, Y, U, I, O, P, Oem4, Oem6, Return, LControlKey, A, S,
			D, F, G, H, J, K, L, Oem1, Oem7, Oem3, LShiftKey, Oem8, Z, X, C, V,
			B, N, M, OemComma, OemPeriod, Oem2, RShiftKey, Multiply, LMenu, Space, Capital, F1, F2, F3, F4, F5,
			F6, F7, F8, F9, F10, NumLock, Scroll, Home, Up, Prior, Subtract, Left, Clear, Right, Add, End,
			Down, Next, Insert, Delete, Snapshot, None, Oem5, F11, F12
		};
		charsUK = new[] {
			'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\b', '\t', '\0', '\0', '\0', '\n', '\0', '\0',
			'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
			' ', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '0', '.', '\0',
			'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '\0', '\0', '\0', '\0', '\0', '\0',
			'\0', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',
			'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '\0', '\0', '\0', '\0', '\0',
			'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '*', '+', '\0', '-', '.', '/',
			'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
			'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
			'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
			'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
			'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', ';', '=', ',', '-', '.', '/',
			'\'', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
			'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '[', '\\', ']', '#', '`',
			'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
			'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
		};
		charsShiftUK = new[] {
			'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\b', '\t', '\0', '\0', '\0', '\n', '\0', '\0',
			'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
			' ', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
			')', '!', '"', '£', '$', '%', '^', '&', '*', '(', '\0', '\0', '\0', '\0', '\0', '\0',
			'\0', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',
			'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '\0', '\0', '\0', '\0', '\0',
			'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '*', '+', '\0', '-', '.', '/',
			'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
			'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
			'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
			'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
			'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', ':', '+', '<', '_', '>', '?',
			'@', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
			'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '{', '|', '}', '~', '¬',
			'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
			'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
		};

		kbdCurrent = kbdUK;
		charsCurrent = charsUK;
		charsShiftCurrent = charsShiftUK;
		alt = shift = ctrl = false;
		queue = new Queue<KeyInfo>();
	}


	public static void Process(int scan) {
		var released = (scan & 0x80) == 0x80;
		var key = kbdCurrent[scan & 0x7F];

		if (key == LShiftKey || key == RShiftKey) {
			shift = !released;

			return;
		}

		if (key == LMenu /*|| key == RMenu*/) {
			alt = !released;

			return;
		}

		if (key == LControlKey || key == RControlKey) {
			ctrl = !released;

			return;
		}

		var info = new KeyInfo(scan, kbdCurrent[scan & 0x7F], shift ? charsShiftCurrent[(int)key] : charsCurrent[(int)key], alt, shift, ctrl);

		if (!released)
			queue.Enqueue(info);
	}

	public static KeyInfo ReadKey() {
		for (; ; ) {
			Native._cli();

			if (queue.Length > 0)
				break;

			Native._sti();
			Native._hlt();
		}

		var r = queue.Dequeue();
		Native._sti();

		return r;
	}
}